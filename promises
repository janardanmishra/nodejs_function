https://www.guru99.com/node-js-promise-generator-event.html


//// Callbacks to promises

var Promise = require('promise');
var MongoClient = require('mongodb').MongoClient;
var url = 'mongodb://localhost/EmployeeDB';

MongoClient.connect(url)
    .then(function(err, db) {  // callback function
        db.collection('Employee').updateOne({
            "EmployeeName": "Martin"
        }, {
            $set: {
                "EmployeeName": "Mohan"
            }
        });
    }); 




//// Dealing with nested promises

var Promise = require('promise');
var MongoClient = require('mongodb').MongoClient;
var url = 'mongodb://localhost/EmployeeDB';
MongoClient.connect(url)

.then(function(db) {
    db.collection('Employee').insertOne({
        Employeeid: 4,
        EmployeeName: "NewEmployee"
    })

    .then(function(db1) {
        db1.collection('Employee').insertOne({
            Employeeid: 5,
            EmployeeName: "NewEmployee1"
        })
    })
});


//////////////////////// Using util ////////////////////////////////

const util = require('util');

async function fn() {
  return 'hello world';
}
const callbackFunction = util.callbackify(fn);

callbackFunction((err, ret) => {
  if (err) throw err;
  console.log(ret);
});

//////////////////////   Testing for Promses /////////////////

var Promise = require('promise');


router.get('/testPromises', function (req, res, next) {

    promiseObj.then(function (result) {
        console.log("Result==> ");
        res.json({"Promises work successfully":result});
    }).catch(function (err) {
        console.log("errrr==> ");
        res.json({"Err occered":err});
    });

});


var promiseObj = new Promise(function (resolve, reject) {

    Users.find({}, function (err, data) {
        if (err) {
            reject(err);
        } else {
            resolve(data);
        }
    })
});

///////////////////////////////////////////////////////////////////////



















